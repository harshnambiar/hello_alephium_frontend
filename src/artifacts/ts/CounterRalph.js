"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CounterRalphInstance = exports.CounterRalph = void 0;
const web3_1 = require("@alephium/web3");
const CounterRalph_ral_json_1 = __importDefault(require("../CounterRalph.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
const web3_2 = require("@alephium/web3");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = { Change: 0, Reset: 1 };
        this.consts = {
            ErrorCodes: {
                MaxLimit: BigInt("0"),
                AlreadyNil: BigInt("1"),
                DataMalfunction: BigInt("2"),
                LackOfBal: BigInt("7"),
            },
        };
        this.tests = {
            getCounter: async (params) => {
                return (0, web3_1.testMethod)(this, "getCounter", params, contracts_1.getContractByCodeHash);
            },
            getLastCaller: async (params) => {
                return (0, web3_1.testMethod)(this, "getLastCaller", params, contracts_1.getContractByCodeHash);
            },
            getLastFiveChanges: async (params) => {
                return (0, web3_1.testMethod)(this, "getLastFiveChanges", params, contracts_1.getContractByCodeHash);
            },
            incrementCounter: async (params) => {
                return (0, web3_1.testMethod)(this, "incrementCounter", params, contracts_1.getContractByCodeHash);
            },
            resetCounter: async (params) => {
                return (0, web3_1.testMethod)(this, "resetCounter", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new CounterRalphInstance(address);
    }
    stateForTest(initFields, asset, address, maps) {
        return this.stateForTest_(initFields, asset, address, maps);
    }
}
// Use this object to test and deploy the contract
exports.CounterRalph = new Factory(web3_1.Contract.fromJson(CounterRalph_ral_json_1.default, "=16-2+82=2-2+ea=445-1+9=10+a0007e021d5468652063757272656e7420636f756e7465722076616c75652069732000=154+7a7e0214696e73657274206174206d617020706174683a2000=53-1+f=10+a0007e021d5468652063757272656e7420636f756e7465722076616c75652069732000=116", "2e40852d9b7d9ebd0c35117f81afcd695e07206c9fe72936c95d817030cbca1b", types_1.AllStructs));
(0, contracts_1.registerContract)(exports.CounterRalph);
// Use this class to interact with the blockchain
class CounterRalphInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.maps = {
            counter_usages: new web3_2.RalphMap(exports.CounterRalph.contract, this.contractId, "counter_usages"),
        };
        this.view = {
            getCounter: async (params) => {
                return (0, web3_1.callMethod)(exports.CounterRalph, this, "getCounter", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getLastCaller: async (params) => {
                return (0, web3_1.callMethod)(exports.CounterRalph, this, "getLastCaller", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getLastFiveChanges: async (params) => {
                return (0, web3_1.callMethod)(exports.CounterRalph, this, "getLastFiveChanges", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            incrementCounter: async (params) => {
                return (0, web3_1.callMethod)(exports.CounterRalph, this, "incrementCounter", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            resetCounter: async (params) => {
                return (0, web3_1.callMethod)(exports.CounterRalph, this, "resetCounter", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            getCounter: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.CounterRalph, this, "getCounter", params);
            },
            getLastCaller: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.CounterRalph, this, "getLastCaller", params);
            },
            getLastFiveChanges: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.CounterRalph, this, "getLastFiveChanges", params);
            },
            incrementCounter: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.CounterRalph, this, "incrementCounter", params);
            },
            resetCounter: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.CounterRalph, this, "resetCounter", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.CounterRalph, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribeChangeEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.CounterRalph.contract, this, options, "Change", fromCount);
    }
    subscribeResetEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.CounterRalph.contract, this, options, "Reset", fromCount);
    }
    subscribeAllEvents(options, fromCount) {
        return (0, web3_1.subscribeContractEvents)(exports.CounterRalph.contract, this, options, fromCount);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.CounterRalph, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.CounterRalphInstance = CounterRalphInstance;
